########################################################################################################

# EXAMPLE queries, mutations for PhotoSharingSchema.gql 

query photos {                  # Example query for API defined in root Query type
    totalPhotos
    allPhotos{
        name                    
        url

    }

}

query groups {                 # Example query for api that return list of more the one object types (implemented with UNION)
   agenda {
      ...on StudentGroup {
            name
            tasks
      }
      ...on StudyGroup {
            name
            department
            assigned{
                id
                name
            }
      }
   }
}

query groups2 {           # Example query for api that return list of more the one object types (implemented with Interface)

    name
    start
    end
    members
    ...on DesignGroup{
         topic
    }
}

query {                 # Example of using arguments in queries
   User(githubLogin: "gits2501") {
        name
        avatar
   }
}

query {
   Photo(id: "14TH5B6NS4KIG3H4S") {
       name
       description
       url
   }
}

query {
   allPhotos(category: "LANDSCAPE") {  # Return filtered list of photos that mach category "LANDSCAPE"
      name
      description
      url
   }
}

mutation {                            # Example of mutation that will create a photo with given name. 
                                      # On success it returns data specified in a selection set
   postPhoto(name: "Into the GraphQL") {
       id                                   # id generated by the database
       url                                  # generated url
       created                              
       postedBy {
         name
       }
   }
}

mutation postPhoto(                # Make mutation reusable with mutaion variables
    $name: String!
    $description: String
    $category: PhotoCategory
) {
    postPhoto(
       name: $name
       description: $description
       category: $category
    ) {                          # on success assume it will return fields in selection set (id, name, email)
           id
          name
          email
       }
}

mutation newPhoto($input: PostPhotoInput!) {  # organizing miltiple mutation arguments to Input type
    postPhoto(input: $input) {
        id
        url
        created
    }
}

subscription {                   # Example subscription for new(post)Photo mutations only for photos with cat = ACTION
   newPhoto(category: "ACTION") {
        id
        name
        url
        postedBy {
           name
        }
   }
