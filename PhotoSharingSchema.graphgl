enum PhotoCategory { 
  SELFIE
  PORTRAIT
  ACTION
  LANDSCAPE
  GRAPHIC
}

type User {                      # CUSTOM type              
  githubLogin: ID!
  name: String
  avatar: String

  postedPhotos: [Photo!]!        # one-to-many connection to the Photo type object
  inPhotos: [Photo!]!            # one-to-many. Makes one side of the many-to-many connection(relationship). See 'taggedUsers' in Photo type

  # friends: [User!]!            # one-to-many. Connection that models both sides of the many-to-many friends concept.
  friendship: [Friendship!]!     # Alternative connection that models frenship with additional data about connection    
}

type Friendship {                
  friend: User!
  howLong: Int!
  whereWeMet: Location
}

type Location {
    name: String!
}

union AgendaItem = DevGroup | AdminGroup   # Define UNION type so list can have objects of more then one type
  
type DevGroup {
      name: String!
      department: String!
      assigned: [User!]!
}

type StudentGroup {
   name: String!
   tasks: String!
}

type Query {                     # Add agenda so we can query it 
  agenda: [AgendaItem!]!
}

interface AgendaItem2{          # Interface for fields that types need to implement

    name: String!
    start: DateTime!
    end: DateTime!
    members:[User!]!
}

type QAGroup implements AgendaItem2{
    name: String!
    start: DateTime!
    end: DateTime!

    members: [User!]!
}

type DesignGroup implements AgendaItem2{
    name: String!
    start: DateTime!
    end: DateTime!
    members:[User!]!

    topic: String!

}

type Query {                      # Add api tha returns list where objects different types (Implemented with Interface)
    aggenda2: [AgendaItem2!]!
}

type Photo {               
   id: ID!
   name: String!
   url: String!
   description: String
   created: DateTime!
   category: PhotoCategory!
   postedBy: User!               # one-to-one connection to the User type object
   taggedUsers: [User!]!         # one-to-many. Makes other side of the many-to-many connnection. See 'inPhotos' in User type
}

type Query {                     # ROOT type. Common place for one-to-many connections to the CUSTOM types. In query we define out GraphQL API's
   totalPhotos: Int!             # bring number of Photos 
   allPhotos: [Photo!]!          # bring all Photos
   totalUsers: Int!         
   allUsers: [User!]!
}
schema {
   query: Query                  # Adding the query type to Schema - which makes it avalable as GraphQL API
}

########################################################################################################

# queryes   

query photos {                  # Example query for API defined in root Query type
    totalPhotos
    allPhotos{
        name                    
        url

    }

}

query groups {                 # Example query for api that return list of more the one object types (implemented with UNION)
   agenda {
      ...on StudentGroup {
            name
            tasks
      }
      ...on StudyGroup {
            name
            department
            assigned{
                id
                name
            }
      }
   }
}
query groups2 {           # Example query for api that return list of more the one object types (implemented with Interface)

    name: String!
    start: DateTime!
    end: DateTime!
    members:[User!]!
    ...on DesignGroup{
         topic
    }
}